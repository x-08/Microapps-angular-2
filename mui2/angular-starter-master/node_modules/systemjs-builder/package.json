{
  "_args": [
    [
      {
        "raw": "systemjs-builder@^0.16.4",
        "scope": null,
        "escapedName": "systemjs-builder",
        "name": "systemjs-builder",
        "rawSpec": "^0.16.4",
        "spec": ">=0.16.4 <0.17.0",
        "type": "range"
      },
      "C:\\Users\\x\\Desktop\\ng2Starter\\angular-starter-master (1)\\angular-starter-master\\node_modules\\@ngstarter\\systemjs-extension"
    ]
  ],
  "_from": "systemjs-builder@>=0.16.4 <0.17.0",
  "_id": "systemjs-builder@0.16.9",
  "_inCache": true,
  "_location": "/systemjs-builder",
  "_nodeVersion": "8.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/systemjs-builder-0.16.9.tgz_1497439792474_0.9128941206727177"
  },
  "_npmUser": {
    "name": "guybedford",
    "email": "guybedford@gmail.com"
  },
  "_npmVersion": "5.0.0",
  "_phantomChildren": {
    "when": "3.7.8"
  },
  "_requested": {
    "raw": "systemjs-builder@^0.16.4",
    "scope": null,
    "escapedName": "systemjs-builder",
    "name": "systemjs-builder",
    "rawSpec": "^0.16.4",
    "spec": ">=0.16.4 <0.17.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@ngstarter/systemjs-extension"
  ],
  "_resolved": "https://registry.npmjs.org/systemjs-builder/-/systemjs-builder-0.16.9.tgz",
  "_shasum": "f7ed90ae73739a49c954e5592d35c49a3b51be76",
  "_shrinkwrap": null,
  "_spec": "systemjs-builder@^0.16.4",
  "_where": "C:\\Users\\x\\Desktop\\ng2Starter\\angular-starter-master (1)\\angular-starter-master\\node_modules\\@ngstarter\\systemjs-extension",
  "author": "",
  "bugs": {
    "url": "https://github.com/systemjs/builder/issues"
  },
  "dependencies": {
    "babel-core": "^6.24.1",
    "babel-plugin-syntax-dynamic-import": "^6.18.0",
    "babel-plugin-transform-amd-system-wrapper": "^0.3.7",
    "babel-plugin-transform-cjs-system-wrapper": "^0.6.2",
    "babel-plugin-transform-es2015-modules-systemjs": "^6.6.5",
    "babel-plugin-transform-global-system-wrapper": "^0.3.4",
    "babel-plugin-transform-system-register": "^0.0.1",
    "bluebird": "^3.3.4",
    "data-uri-to-buffer": "0.0.4",
    "es6-template-strings": "^2.0.0",
    "glob": "^7.0.3",
    "mkdirp": "^0.5.1",
    "rollup": "^0.36.3",
    "source-map": "^0.5.3",
    "systemjs": "^0.19.46",
    "traceur": "0.0.105",
    "uglify-js": "^2.6.1"
  },
  "description": "SystemJS Build Tool",
  "devDependencies": {
    "babel": "^5.8.38",
    "chai": "^3.0.0",
    "mocha": "^2.2.5",
    "mocha-phantomjs": "4.1.0",
    "phantomjs": "2.1.7",
    "systemjs-plugin-babel": "0.0.19",
    "typescript": "1.6.2",
    "unexpected": "^9.11.0",
    "when": "^3.7.5"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-tGmAXDemRiVm73n/TTYCul+jgwuphJlf/9YB7SOkQzI9Q6ivD2OmC94hoGAfIupj2MLVoWaiaSe0gtSf5nfEjA==",
    "shasum": "f7ed90ae73739a49c954e5592d35c49a3b51be76",
    "tarball": "https://registry.npmjs.org/systemjs-builder/-/systemjs-builder-0.16.9.tgz"
  },
  "gitHead": "458b5d4b55a4681fcd90d3ad6cb480d25f1b1d31",
  "homepage": "https://github.com/systemjs/builder",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "guybedford",
      "email": "guybedford@gmail.com"
    }
  ],
  "name": "systemjs-builder",
  "optionalDependencies": {},
  "readme": "SystemJS Build Tool [![Build Status][travis-image]][travis-url] [![Support](https://supporterhq.com/api/b/33df4abbec4d39260f49015d2457eafe/SystemJS)](https://supporterhq.com/support/33df4abbec4d39260f49015d2457eafe/SystemJS)\n===\n\n_[SystemJS Builder 0.16 release notes](https://github.com/systemjs/builder/releases/tag/0.16.0)_\n\n_Note for SystemJS 0.19 support use SystemJS Builder 0.15_\n\nProvides a single-file build for SystemJS of mixed-dependency module trees.\n\nBuilds ES6 into ES5, CommonJS, AMD and globals into a single file in a way that supports the CSP SystemJS loader\nas well as circular references.\n\nExample\n---\n\napp.js\n```javascript\nimport $ from \"./jquery.js\";\nexport var hello = 'es6';\n```\n\njquery.js\n```javascript\ndefine(function() {\n  return 'this is jquery';\n});\n```\n\nWill build the module `app` into a bundle containing both `app` and `jquery` defined through `System.register` calls.\n\nCircular references and bindings in ES6, CommonJS and AMD all behave exactly as they should, including maintaining execution order.\n\nDocumentation\n---\n[API Reference](docs/api.md)\n\nUsage\n---\n\n### Install\n\n```javascript\nnpm install systemjs-builder\n```\n\n### Basic Use\n\nEnsure that the transpiler is installed separately (`npm install babel-core` here).\n\n```javascript\nvar path = require(\"path\");\nvar Builder = require('systemjs-builder');\n\n// optional constructor options\n// sets the baseURL and loads the configuration file\nvar builder = new Builder('path/to/baseURL', 'path/to/system/config-file.js');\n\nbuilder\n.bundle('local/module.js', 'outfile.js')\n.then(function() {\n  console.log('Build complete');\n})\n.catch(function(err) {\n  console.log('Build error');\n  console.log(err);\n});\n```\n\n### Setting Configuration\n\nConfiguration can be injected via `builder.config`:\n\n```javascript\nbuilder.config({\n  map: {\n    'a': 'b.js'\n  }\n});\nbuilder.build('a');\n```\n\nTo load custom configuration files use `builder.loadConfig`:\n\n```javascript\n// `builder.loadConfig` will load config from a file containing `System.config({...})`\nbuilder.loadConfig('./cfg.js')\n.then(function() {\n  // ready to build\n});\n```\n\nMultiple config calls can be run, which will combine into the loader configuration.\n\n#### Resetting Configuration\n\nTo reset the loader state and configuration use `builder.reset()`.\n\nWhen config was passed into the `new Builder(baseURL, configFile)` constructor, the config will be reset to this exact `configFile` state.\n\n### Self-Executing (SFX) Bundles\n\nTo make a bundle that is independent of the SystemJS loader entirely, we can make SFX bundles:\n\n```javascript\nbuilder.buildStatic('myModule.js', 'outfile.js', options);\n```\n\nThis bundle file can then be included with a `<script>` tag, and no other dependencies would need to be included in the page. You'll likely want your module\nto export a global variable when loaded from a script tag, and this can be configured via `globalName`.  For example\n\n```javascript\nbuilder.buildStatic('src/NavBar.js', 'dist/NavBarStaticBuild.js', {\n  globalName: 'NavBar'\n});\n```\n\nwill cause the output of your module to be assigned to a global variable named `NavBar`.  If you're making a static bundle, while excluding certain dependencies, those dependencies\nwill of course need to have already been loaded on your page, with their own global variables exported.  You can match these global variables up with your needed dependencies\nwith `globalDeps`.  For example\n\n```javascript\nbuilder.buildStatic('src/NavBar.js - react', 'dist/NavBarStaticBuild.js', {\n  globalName: 'NavBar',\n  globalDeps: {\n    'react': 'React'\n  }\n});\n```\n\nwill create a static build of NavBar—without React—which, when loaded via a script tag, exports an eponymous global variable, and assumes the existence of a React global variable, which will be used for the `react` dependency.\n\nThis would support users with a setup of\n\n```javascript\n<script src='path/to/react.min.js'></script>\n<script src='path/to/NavBarStaticBuild.js'></script>\n```\n\nNote that another way of excluding `react` would be with `externals`.\n\n```javascript\nbuilder.buildStatic('src/NavBar.js', 'dist/NavBarStaticBuild.js', {\n  externals: ['react'],\n  globalName: 'NavBar',\n  globalDeps: {\n    'react': 'React'\n  }\n});\n```\n\nThis would also exclude react but, if react defined any dependencies which NavBar *also* defined, those dependencies would be *included* in the build.\n\nOf course the above explanations involving `globalDeps` and `globalName` only apply to when your end user loads the static file from a script tag.  Since the output is (by default, see below) UMD, a\nscript loader like SystemJS or requireJS would process it as configured, or via AMD respectively.\n\nBy default, the Traceur or Babel runtime are automatically included in the SFX bundle if needed. To exclude the Babel or Traceur runtime set the `runtime` build option to false:\n\n```javascript\nbuilder.buildStatic('myModule.js', 'outfile.js', { runtime: false });\n```\n\n#### SFX Format\n\nSFX bundles can also be output as a custom module format - `amd`, `cjs` or `es6` for consumption in different environments.\n\nThis is handled via the `format` (previously `sfxFormat`) option:\n\n```javascript\nbuilder.buildStatic('myModule.js', 'outfile.js', { format: 'cjs' });\n```\n\nThe first module used as input (`myModule.js` here) will then have its exports output as the CommonJS exports of the whole SFX bundle itself\nwhen run in a CommonJS environment.\n\n#### Adapter Modules\n\nTo have globals like `jQuery` not included, and included in a separate script tag, set up an adapter module something like:\n\njquery.js\n```javascript\nmodule.exports = window.jQuery;\n```\n\n### Minification & Source Maps\n\nAs well as an `options.config` parameter, it is also possible to specify minification and source maps options:\n\n```javascript\nbuilder.bundle('myModule.js', 'outfile.js', { minify: true, sourceMaps: true, config: cfg });\n```\n\nCompile time with source maps can also be improved with the `lowResSourceMaps` option, where the mapping granularity is per-line instead of per-character:\n\n```javascript\nbuilder.bundle('myModule.js', 'outfile.js', { sourceMaps: true, lowResSourceMaps: true });\n```\n\n#### Minification Options\n\n* `mangle`, defaults to true.\n* `globalDefs`, object allowing for global definition assignments for dead code removal.\n\n```javascript\nbuilder.bundle('myModule.js', 'outfile.js', { minify: true, mangle: false, globalDefs: { DEBUG: false } });\n```\n\n#### SourceMap Options\n\n* `sourceMaps`, Either boolean value (enable/disable) or string value `'inline'` which will inline the SourceMap data as Base64 data URI right in the generated output file (never use in production). *(Default is `false`)*\n* `sourceMapContents`, Boolean value that determines if original sources shall be directly included in the SourceMap. Using inline source contents generates truely self contained SourceMaps which will not need to load the external original source files during debugging. *(Default is `false`; when using `sourceMaps='inline'` it defaults `true`)*\n\n\n### In-Memory Builds\n\nLeave out the `outFile` option to run an in-memory build:\n\n```javascript\nbuilder.bundle('myModule.js', { minify: true }).then(function(output) {\n  output.source;    // generated bundle source\n  output.sourceMap; // generated bundle source map\n  output.modules;   // array of module names defined in the bundle\n});\n```\n\nThe `output` object above is provided for all builds, including when `outFile` is set.\n\n`output.modules` can be used to directly populate SystemJS bundles configuration.\n\n### Ignore Resources\n\nIf loading resources that shouldn't even be traced as part of the build (say an external import), these\ncan be configured with:\n\n```javascript\nbuilder.config({\n  meta: {\n    'resource/to/ignore.js': {\n      build: false\n    }\n  }\n});\n```\n\n### Overriding Fetch\n\nThe framework fetch function can be overridden in order to provide the source for a file manually. This is useful if you want to pre-process the source of a file before using the builder.\n\n```javascript\nvar mySource = 'import * from foo; var foo = \"bar\";'; // get source as a string\nbuilder.bundle('foo.js', {\n  fetch: function (load, fetch) {\n    if (load.name.indexOf('foo.js') !== -1) {\n      return mySource;\n    } else {\n      // fall back to the normal fetch method\n      return fetch(load);\n    }\n  }\n});\n```\n\nThe `load` variable describes the file that is trying to be loaded. This is called once for every file that is trying to be fetched, including dependencies.\n\nThe `fetch` function should return a string.\n\n### Bundle Arithmetic\n\nBoth `builder.build` and `builder.buildStatic` support bundle arithmetic expressions. This allows for the easy construction of custom bundles.\n\nThere is also a `builder.trace` for building direct trace tree objects, which can be directly passed into `builder.bundle` or `builder.buildStatic`.\n\n#### Example - Arithmetic Expressions\n\nIn this example we build all our application code in `app/` excluding the tree `app/corelibs`:\n\n```javascript\nvar Builder = require('systemjs-builder');\n\nvar builder = new Builder({\n  baseURL: '...',\n  map: {\n  } // etc. config\n});\n\nbuilder.bundle('app/* - app/corelibs.js', 'output-file.js', { minify: true, sourceMaps: true });\n```\n\n#### Example - Common Bundles\n\nTo build the dependencies in common between two modules, use the `&` operator:\n\n```javascript\nbuilder.bundle('app/page1.js & app/page2.js', 'common.js');\n```\n\nWe can then exclude this common bundle in future builds:\n\n```javascript\nbuilder.bundle('app/componentA.js - common.js', { minify: true, sourceMaps: true });\n```\n\n#### Example - Third-Party Dependency Bundles\n\nBuild a bundle of all dependencies of the `app/` package excluding anything from `app/` itself.\n\nFor this we can use the `[module]` syntax which represents a single module instead of all its dependencies as well:\n\n```javascript\nbuilder.bundle('app/**/* - [app/**/*]', 'dependencies.js', { minify: true, sourceMaps: true });\n```\n\nThe above means _take the tree of app and all its dependencies, and subtract just the modules in app_, thus leaving us with just the tree of dependencies of the app package.\n\n#### Example - Multiple Common Bundles\n\nParentheses are supported, so the following would bundle everything in common with `page1` and `page2`, and also everything in common between `page3` and `page4`:\n\n```javascript\nbuilder.bundle('(app/page1.js & app/page2.js) + (app/page3.js & app/page4.js)', 'common.js');\n```\n\n#### Example - Direct Trace API\n\nInstead of using the arithmetic syntax, we can construct the trace ourselves.\n\nIn this example we build `app/first` and `app/second` into two separate bundles, while creating a separate shared bundle:\n\n```javascript\nvar Builder = require('systemjs-builder');\n\nvar builder = new Builder({\n  // ...\n});\n\nPromise.all([builder.trace('app/first.js'), builder.trace('app/second.js')])\n.then(function(trees) {\n  var commonTree = builder.intersectTrees(trees[0], trees[1]);\n  return Promise.all([\n    builder.bundle(commonTree, 'shared-bundle.js'),\n    builder.bundle(builder.subtractTrees(trees[0], commonTree), 'first-bundle.js'),\n    builder.bundle(builder.subtractTrees(trees[1], commonTree), 'second-bundle.js')\n  ]);\n});\n```\n\nLicense\n---\n\nMIT\n\n[travis-url]: https://travis-ci.org/systemjs/builder\n[travis-image]: https://travis-ci.org/systemjs/builder.svg?branch=master\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/systemjs/builder.git"
  },
  "scripts": {
    "test": "mocha",
    "update-expectations": "UPDATE_EXPECTATIONS=1 mocha"
  },
  "version": "0.16.9"
}
